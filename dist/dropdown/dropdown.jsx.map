{
  "version": 3,
  "sources": [
    "dropdown.jsx"
  ],
  "names": [
    "Dropdown",
    "props",
    "value",
    "defaultOptionVisible",
    "defaultOption",
    "undefined",
    "state",
    "isOpened",
    "setState",
    "onChange",
    "refs",
    "name",
    "defaultOptionText",
    "options",
    "invalidClassName",
    "invalidField",
    "className",
    "dropdown",
    "inputIsValid",
    "disabled",
    "event",
    "_onChange",
    "target",
    "clickInsideOfTheDropdown",
    "which",
    "renderDefaultOption",
    "map",
    "opt",
    "index",
    "text",
    "propTypes",
    "PropTypes",
    "arrayOf",
    "shape",
    "string",
    "isRequired",
    "bool",
    "func",
    "validate",
    "forceDirty",
    "resetValue"
  ],
  "mappings": "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",
  "file": "dropdown.jsx",
  "sourceRoot": "../../src/form/dropdown",
  "sourcesContent": [
    "import React, { Component } from 'react';\nimport classnames from 'classnames';\nimport styles from './styles.scss';\nimport enhanceWithClickOutside from 'react-click-outside';\n\n/**\n * Dropdown - params:\n * options: Array of { value: string, text: string }\n * value: value of selected option (string)\n * defaultOptionVisible: if true it will render a default option as the first option of the dropdown.\n * defaultOptionText: text of default option\n * onChange: function to be called when the user selects a new option of the dropdown.\n*/\nclass Dropdown extends Component {\n  constructor(props) {\n    super(props);\n\n    const { value, defaultOptionVisible } = this.props;\n\n    const defaultOption =\n      (defaultOptionVisible == undefined || defaultOptionVisible) &&\n      (!value || value == '');\n\n\n    this.state = {\n      defaultOptionVisible: defaultOption,\n      isOpened: false\n    };\n  }\n\n  componentWillReceiveProps({ value, defaultOptionVisible }) {\n    if (this.props.value != value && value === '') {\n      const defaultOption =\n        (defaultOptionVisible == undefined || defaultOptionVisible) &&\n        (!value || value == '');\n      this.setState({ defaultOptionVisible: defaultOption });\n    }\n  }\n\n  _onChange(value) {\n    if (value !== '') {\n      this.setState({ defaultOptionVisible: false });\n    }\n    this.props.onChange(value);\n  }\n\n  clickInsideOfTheDropdown() {\n    this.setState({ isOpened: true });\n  }\n\n  handleClickOutside() {\n    if (this.state.isOpened) {\n      this.props.onChange(this.refs[this.props.name].value);\n      this.setState({ isOpened: false });\n    }\n  }\n\n  renderDefaultOption() {\n    if (this.state.defaultOptionVisible) {\n      return (\n        <option value=''>{this.props.defaultOptionText || 'Select'}</option>\n      );\n    }\n  }\n\n  render() {\n    const {\n      options,\n      value,\n      name,\n      invalidClassName = styles.invalidField,\n      className = styles.dropdown,\n      inputIsValid,\n      disabled\n    } = this.props;\n\n    return (\n      <select\n        onChange={(event) => this._onChange(event.target.value)}\n        onClick={() => this.clickInsideOfTheDropdown()}\n        onKeyDown={(event) => {\n          // if the user press the tab key\n          if (event.which == 9) {\n            this._onChange(event.target.value);\n          }\n        }}\n        onFocus={() => this.clickInsideOfTheDropdown()}\n        value={value}\n        ref={name}\n        name={name}\n        disabled={disabled}\n        className={\n          classnames(\n            !inputIsValid() ? invalidClassName : '',\n            className\n          )\n        }\n      >\n        {this.renderDefaultOption()}\n        {options.map((opt, index) => {\n          return (\n            <option value={opt.value} key={index}>{opt.text}</option>\n          );\n        })}\n      </select>\n    );\n  }\n}\n\nDropdown.propTypes = {\n  options: React.PropTypes.arrayOf(React.PropTypes.shape({\n    value: React.PropTypes.string.isRequired,\n    text: React.PropTypes.string.isRequired\n  })).isRequired,\n  name: React.PropTypes.string.isRequired,\n  className: React.PropTypes.string,\n  invalidClassName: React.PropTypes.string,\n  value: React.PropTypes.string,\n  defaultOptionVisible: React.PropTypes.bool,\n  defaultOptionText: React.PropTypes.string,\n  onChange: React.PropTypes.func,\n  validate: React.PropTypes.func,\n  forceDirty: React.PropTypes.bool,\n  resetValue: React.PropTypes.bool,\n  inputIsValid: React.PropTypes.func,\n  disabled: React.PropTypes.bool\n};\n\nexport default enhanceWithClickOutside(Dropdown);\n"
  ]
}
