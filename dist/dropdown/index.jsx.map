{
  "version": 3,
  "sources": [
    "index.jsx"
  ],
  "names": [
    "Dropdown",
    "props",
    "value",
    "defaultOptionVisible",
    "defaultOption",
    "undefined",
    "state",
    "nextProps",
    "forceDirty",
    "resetValue",
    "refs",
    "name",
    "validateInput",
    "validate",
    "setState",
    "dirty",
    "valid",
    "errorMessage",
    "valueWasResetted",
    "onChange",
    "defaultOptionText",
    "options",
    "fieldClassName",
    "wrapperField",
    "invalidClassName",
    "invalidField",
    "className",
    "dropdown",
    "renderLabel",
    "event",
    "_onChange",
    "target",
    "inputIsValid",
    "renderDefaultOption",
    "map",
    "opt",
    "index",
    "text",
    "renderError",
    "propTypes",
    "PropTypes",
    "string",
    "arrayOf",
    "shape",
    "isRequired",
    "bool",
    "func",
    "setValidInputToUndefined",
    "setInputValue"
  ],
  "mappings": "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",
  "file": "index.jsx",
  "sourceRoot": "../../src/form/dropdown",
  "sourcesContent": [
    "import React from 'react';\nimport InputBaseComponent from '../inputBaseComponent';\nimport classnames from 'classnames';\nimport styles from './styles.scss';\n\n/**\n * Dropdown - params:\n * options: Array of { value: string, text: string }\n * value: value of selected option (string)\n * defaultOptionVisible: if true it will render a default option as the first option of the dropdown.\n * defaultOptionText: text of default option\n * onChange: function to be called when the user selects a new option of the dropdown.\n*/\nclass Dropdown extends InputBaseComponent {\n  constructor(props) {\n    super(props);\n\n    const { value, defaultOptionVisible } = this.props;\n\n    const defaultOption =\n      (defaultOptionVisible == undefined || defaultOptionVisible) &&\n      (!value || value == '');\n\n\n    this.state = {\n      defaultOptionVisible: defaultOption\n    };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const { forceDirty, resetValue } = nextProps;\n    if (this.props.forceDirty != forceDirty && forceDirty) {\n      const value = this.refs[this.props.name].value;\n      const validateInput = this.props.validate(value);\n      this.setState({\n        dirty: true,\n        valid: validateInput.valid,\n        errorMessage: validateInput.errorMessage\n      });\n    }\n\n    if (this.props.resetValue != resetValue && resetValue) {\n      const { value, defaultOptionVisible } = nextProps;\n      const defaultOption =\n        (defaultOptionVisible == undefined || defaultOptionVisible) &&\n        (!value || value == '');\n      this.setState({\n        defaultOptionVisible: defaultOption,\n        dirty: false\n      });\n      this.props.valueWasResetted();\n    }\n  }\n\n  _onChange(value) {\n    const {\n      onChange,\n      validate = () => true\n    } = this.props;\n    const validateInput = validate(value);\n    this.setState({\n      defaultOptionVisible: false,\n      valid: validateInput.valid,\n      dirty: true,\n      errorMessage: validateInput.errorMessage\n    });\n    if (onChange) {\n      onChange(value);\n    }\n  }\n\n  renderDefaultOption() {\n    if (this.state.defaultOptionVisible) {\n      return (\n        <option value=''>{this.props.defaultOptionText || 'Select'}</option>\n      );\n    }\n  }\n  render() {\n    const {\n      options,\n      value,\n      fieldClassName = styles.wrapperField,\n      name,\n      invalidClassName = styles.invalidField,\n      className = styles.dropdown\n    } = this.props;\n\n    return (\n      <div className={fieldClassName}>\n        {this.renderLabel()}\n        <select\n          onChange={(event) => this._onChange(event.target.value)}\n          value={value}\n          ref={name}\n          name={name}\n          className={\n            classnames(\n              !this.inputIsValid() ? invalidClassName : '',\n              className\n            )\n          }\n        >\n          {this.renderDefaultOption()}\n          {options.map((opt, index) => {\n            return (\n              <option value={opt.value} key={index}>{opt.text}</option>\n            );\n          })}\n        </select>\n        {this.renderError()}\n      </div>\n    );\n  }\n}\n\nDropdown.propTypes = {\n  fieldClassName: React.PropTypes.string,\n  options: React.PropTypes.arrayOf(React.PropTypes.shape({\n    value: React.PropTypes.string.isRequired,\n    text: React.PropTypes.string.isRequired\n  })).isRequired,\n  name: React.PropTypes.string.isRequired,\n  className: React.PropTypes.string,\n  invalidClassName: React.PropTypes.string,\n  value: React.PropTypes.string,\n  defaultOptionVisible: React.PropTypes.bool,\n  defaultOptionText: React.PropTypes.string,\n  onChange: React.PropTypes.func,\n  validate: React.PropTypes.func,\n  setValidInputToUndefined: React.PropTypes.func,\n  setInputValue: React.PropTypes.func\n};\n\nexport default Dropdown;\n"
  ]
}
