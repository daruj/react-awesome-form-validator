{
  "version": 3,
  "sources": [
    "index2.jsx"
  ],
  "names": [
    "Dropdown",
    "props",
    "selectedOption",
    "defaultOptionVisible",
    "defaultOption",
    "undefined",
    "state",
    "value",
    "onChange",
    "validate",
    "setInputValue",
    "validateInput",
    "setState",
    "valid",
    "dirty",
    "errorMessage",
    "defaultOptionText",
    "options",
    "fieldClassName",
    "wrapperField",
    "name",
    "invalidClassName",
    "invalidField",
    "className",
    "dropdown",
    "renderLabel",
    "event",
    "_onChange",
    "target",
    "inputIsValid",
    "renderDefaultOption",
    "map",
    "opt",
    "index",
    "text",
    "renderError",
    "propTypes",
    "PropTypes",
    "string",
    "arrayOf",
    "shape",
    "isRequired",
    "bool",
    "func",
    "setValidInputToUndefined"
  ],
  "mappings": "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",
  "file": "index2.jsx",
  "sourceRoot": "../../src/form/dropdown",
  "sourcesContent": [
    "import React from 'react';\nimport InputBaseComponent from '../inputBaseComponent';\nimport classnames from 'classnames';\nimport styles from './styles.scss';\n\n/**\n * Dropdown - params:\n * options: Array of { value: string, text: string }\n * selectedOption: value of selected option (string)\n * defaultOptionVisible: if true it will render a default option as the first option of the dropdown.\n * defaultOptionText: text of default option\n * onChange: function to be called when the user selects a new option of the dropdown.\n*/\nclass Dropdown extends InputBaseComponent {\n  constructor(props) {\n    super(props);\n\n    const { selectedOption, defaultOptionVisible } = this.props;\n\n    const defaultOption =\n      (defaultOptionVisible == undefined || defaultOptionVisible) &&\n      (!selectedOption || selectedOption == '');\n\n\n    this.state = {\n      defaultOptionVisible: defaultOption\n    };\n  }\n\n  _onChange(value) {\n    const {\n      onChange,\n      validate = () => true,\n      setInputValue\n    } = this.props;\n    const validateInput = validate(value);\n    this.setState({\n      defaultOptionVisible: false,\n      valid: validateInput.valid,\n      dirty: true,\n      errorMessage: validateInput.errorMessage\n    });\n    // set value to the inputValues form\n    setInputValue(value);\n    // if we pass onChange as a prop then use it!\n    if (onChange) {\n      onChange(value);\n    }\n  }\n\n  renderDefaultOption() {\n    if (this.state.defaultOptionVisible) {\n      return (\n        <option value=''>{this.props.defaultOptionText || 'Select'}</option>\n      );\n    }\n  }\n  render() {\n    const {\n      options,\n      selectedOption,\n      fieldClassName = styles.wrapperField,\n      name,\n      invalidClassName = styles.invalidField,\n      className = styles.dropdown\n    } = this.props;\n\n    return (\n      <div className={fieldClassName}>\n        {this.renderLabel()}\n        <select\n          onChange={(event) => this._onChange(event.target.value)}\n          value={selectedOption}\n          ref={name}\n          name={name}\n          className={\n            classnames(\n              !this.inputIsValid() ? invalidClassName : '',\n              className\n            )\n          }\n        >\n          {this.renderDefaultOption()}\n          {options.map((opt, index) => {\n            return (\n              <option value={opt.value} key={index}>{opt.text}</option>\n            );\n          })}\n        </select>\n        {this.renderError()}\n      </div>\n    );\n  }\n}\n\nDropdown.propTypes = {\n  fieldClassName: React.PropTypes.string,\n  options: React.PropTypes.arrayOf(React.PropTypes.shape({\n    value: React.PropTypes.string.isRequired,\n    text: React.PropTypes.string.isRequired\n  })).isRequired,\n  name: React.PropTypes.string.isRequired,\n  className: React.PropTypes.string,\n  invalidClassName: React.PropTypes.string,\n  selectedOption: React.PropTypes.string,\n  defaultOptionVisible: React.PropTypes.bool,\n  defaultOptionText: React.PropTypes.string,\n  onChange: React.PropTypes.func,\n  validate: React.PropTypes.func,\n  setValidInputToUndefined: React.PropTypes.func,\n  setInputValue: React.PropTypes.func\n};\n\nexport default Dropdown;\n"
  ]
}
