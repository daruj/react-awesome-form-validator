{
  "version": 3,
  "sources": [
    "index.jsx"
  ],
  "names": [
    "Form",
    "props",
    "state",
    "forceDirty",
    "validInputs",
    "inputValues",
    "children",
    "Children",
    "map",
    "child",
    "component",
    "type",
    "name",
    "getComponent",
    "cloneElement",
    "onClick",
    "event",
    "preventDefault",
    "x",
    "setState",
    "isValid",
    "valid",
    "setValidInputToUndefined",
    "undefined",
    "setInputValue",
    "value",
    "validate",
    "errorMessage",
    "customInput",
    "childrenWithProps",
    "className",
    "propTypes",
    "node",
    "PropTypes",
    "string",
    "CustomInput",
    "displayName",
    "Input",
    "SubmitButton",
    "Wrapper"
  ],
  "mappings": "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",
  "file": "index.jsx",
  "sourceRoot": "../src/form",
  "sourcesContent": [
    "import React, { Component, PropTypes } from 'react';\nimport Input from './input';\nimport SubmitButton from './submit-button';\nimport Wrapper from './wrapper';\nimport CustomInput from './custom-input';\nimport { some } from 'lodash';\n\nclass Form extends Component {\n  static propTypes = {\n    children: PropTypes.node\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      forceDirty: false,\n      validInputs: {},\n      inputValues: {}\n    };\n  }\n\n  getComponent(children) {\n    return React.Children.map(children,\n      (child) => {\n        let component = child;\n        switch (child.type.name) {\n          case 'Wrapper':\n            component = (\n              <Wrapper {...child.props}>\n                {this.getComponent(child.props.children)}\n              </Wrapper>\n            );\n            break;\n          case 'SubmitButton':\n            component = React.cloneElement(child, {\n              onClick: (event) => {\n                event.preventDefault();\n                if (!some(this.state.validInputs, (x) => !x)) {\n                  child.props.onClick(this.state.inputValues);\n                } else {\n                  this.setState({ forceDirty: true });\n                }\n              }\n            });\n            break;\n          case 'Input':\n            component = React.cloneElement(child, {\n              forceDirty: this.state.forceDirty,\n              isValid: (valid) => {\n                const state = { ...this.state };\n                state.validInputs[child.props.name] = valid;\n                this.setState(state);\n              },\n              setValidInputToUndefined: () => {\n                const state = { ...this.state };\n                state.validInputs[child.props.name] = undefined;\n                this.setState(state);\n              },\n              setInputValue: (value) => {\n                const state = { ...this.state };\n                state.inputValues[child.props.name] = value;\n                this.setState(state);\n              },\n              validate: (value) => {\n                if (child.props.validate) {\n                  return child.props.validate(value);\n                } else {\n                  return {\n                    valid: true,\n                    errorMessage: ''\n                  };\n                }\n              }\n            });\n            break;\n          case 'CustomInput':\n            const customInput = child.props.children;\n            component = React.cloneElement(customInput, {\n              forceDirty: this.state.forceDirty,\n              isValid: (valid) => {\n                const state = { ...this.state };\n                state.validInputs[customInput.props.name] = valid;\n                this.setState(state);\n              },\n              setValidInputToUndefined: () => {\n                const state = { ...this.state };\n                state.validInputs[customInput.props.name] = undefined;\n                state.inputValues[customInput.props.name] = undefined;\n                this.setState(state);\n              },\n              setInputValue: (value) => {\n                const state = { ...this.state };\n                state.inputValues[customInput.props.name] = value;\n                this.setState(state);\n              },\n              validate: (value) => {\n                if (customInput.props.validate) {\n                  return customInput.props.validate(value);\n                } else {\n                  return {\n                    valid: true,\n                    errorMessage: ''\n                  };\n                }\n              }\n            });\n            break;\n        }\n        return component;\n      }\n    );\n  }\n\n  render() {\n    const childrenWithProps = this.getComponent(this.props.children);\n    return (\n      <form className={this.props.className}>\n        {childrenWithProps}\n      </form>\n    );\n  }\n}\n\nForm.propTypes = {\n  className: React.PropTypes.string\n};\n\nForm.CustomInput = CustomInput;\nForm.CustomInput.displayName = 'CustomInput';\n\nForm.Input = Input;\nForm.Input.displayName = 'Input';\n\nForm.SubmitButton = SubmitButton;\nForm.SubmitButton.displayName = 'SubmitButton';\n\nForm.Wrapper = Wrapper;\nForm.Wrapper.displayName = 'Wrapper';\n\nexport default Form;\n"
  ]
}
