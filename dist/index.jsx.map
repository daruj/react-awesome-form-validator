{
  "version": 3,
  "sources": [
    "index.jsx"
  ],
  "names": [
    "Form",
    "props",
    "inputs",
    "getInput",
    "child",
    "getDefaultValues",
    "valid",
    "value",
    "validate",
    "disabled",
    "defaults",
    "dirty",
    "errorMessage",
    "resetValue",
    "type",
    "name",
    "children",
    "length",
    "x",
    "customInput",
    "state",
    "forceDirty",
    "resetForm",
    "disableInputs",
    "formWasResetted",
    "setInputsValues",
    "input",
    "setState",
    "onClick",
    "event",
    "preventDefault",
    "onReset",
    "disabledUntilFormIsValidated",
    "onSubmit",
    "getInputsAndTheirValues",
    "newValues",
    "inputName",
    "onChange",
    "setInputValues",
    "extra",
    "validateObj",
    "valueWasResetted",
    "Children",
    "map",
    "component",
    "getChildrenComponents",
    "cloneElement",
    "getSubmitButtonProps",
    "getResetButtonProps",
    "getInputsCommonProps",
    "customSubmitButton",
    "customResetButton",
    "className",
    "propTypes",
    "node",
    "PropTypes",
    "string",
    "bool",
    "func",
    "isRequired",
    "CustomInput",
    "displayName",
    "Input",
    "Dropdown",
    "SubmitButton",
    "CustomSubmitButton",
    "ResetButton",
    "CustomResetButton",
    "Wrapper"
  ],
  "mappings": "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",
  "file": "index.jsx",
  "sourceRoot": "../src/form",
  "sourcesContent": [
    "import React, { Component, PropTypes } from 'react';\nimport Input from './input';\nimport Dropdown from './dropdown';\nimport SubmitButton from './submit-button';\nimport ResetButton from './reset-button';\nimport Wrapper from './wrapper';\nimport CustomInput from './custom-input';\nimport CustomResetButton from './custom-reset-button';\nimport CustomSubmitButton from './custom-submit-button';\nimport { some } from 'lodash';\n\nclass Form extends Component {\n  static propTypes = {\n    children: PropTypes.node\n  }\n\n  constructor(props) {\n    super(props);\n\n    const inputs = {};\n\n    const getInput = (child) => {\n      const getDefaultValues = ({ valid, value, validate, disabled = false }) => {\n        const defaults = {\n          valid: valid || !validate,\n          value: value || '',\n          dirty: false,\n          errorMessage: ''\n        };\n        return { ...defaults, defaults, resetValue: false, disabled };\n      };\n      switch (child.type.name) {\n        case 'Wrapper':\n          if (child.props.children) {\n            if (child.props.children.length) {\n              for (const x in child.props.children) {\n                getInput(child.props.children[x]);\n              }\n            } else {\n              getInput(child.props.children);\n            }\n          }\n          break;\n        case 'Input':\n        case 'DropdownWrapper': inputs[child.props.name] = getDefaultValues(child.props); break;\n        case 'CustomInput':\n          const customInput = child.props.children;\n          inputs[customInput.props.name] = getDefaultValues(customInput.props);\n          break;\n      }\n    };\n\n    for (const x in this.props.children) {\n      getInput(this.props.children[x]);\n    }\n\n    this.state = { forceDirty: false, inputs };\n  }\n\n  componentWillReceiveProps({ resetForm, disableInputs }) {\n    if (this.props.resetForm != resetForm && resetForm) {\n      this.resetForm();\n      this.props.formWasResetted();\n    }\n\n    if (this.props.disableInputs != disableInputs) {\n      this.setInputsValues({ disabled: disableInputs });\n    }\n  }\n\n  resetForm() {\n    const state = { ...this.state };\n    const inputs = state.inputs;\n    for (const input in state.inputs) {\n      const { valid, value, dirty } = state.inputs[input].defaults;\n      inputs[input] = {\n        ...state.inputs[input],\n        resetValue: true,\n        valid, value, dirty\n      };\n    }\n    this.setState({ state, forceDirty: false });\n  }\n\n  getResetButtonProps(props) {\n    return {\n      disabled: this.props.disableInputs,\n      onClick: (event) => {\n        event.preventDefault();\n        this.resetForm();\n        // proceed to call the onReset prop from the Form.\n        if (this.props.onReset) {\n          this.props.onReset();\n        }\n      }\n    };\n  }\n\n  getSubmitButtonProps(props) {\n    return {\n      disabled: this.props.disableInputs || (props.disabledUntilFormIsValidated\n        ? some(this.state.inputs, (input) => !input.valid)\n        : false),\n      onClick: (event) => {\n        event.preventDefault();\n        //check if all the inputs are valid\n        if (!some(this.state.inputs, (input) => !input.valid)) {\n          // proceed to call the onSubmit prop from the Form.\n          this.props.onSubmit({ ...this.getInputsAndTheirValues() });\n        } else {\n          this.setInputsValues({ dirty: true });\n          this.setState({ forceDirty: true });\n        }\n      }\n    };\n  }\n\n  getInputsAndTheirValues() {\n    const inputs = {};\n    for (const input in this.state.inputs) {\n      inputs[input] = this.state.inputs[input].value;\n    }\n    return inputs;\n  }\n\n  setInputsValues(newValues) {\n    const state = { ...this.state };\n    const inputs = state.inputs;\n    for (const input in state.inputs) {\n      inputs[input] = { ...state.inputs[input], ...newValues };\n    }\n    this.setState({ state });\n  }\n\n  setInputValues(inputName, newValues) {\n    const state = { ...this.state };\n    state.inputs[inputName] = {\n      ...state.inputs[inputName],\n      ...newValues\n    };\n    this.setState({ state });\n  }\n\n  getInputsCommonProps(props) {\n    const { name, validate, onChange } = props;\n    const input = name;\n    const { inputs, forceDirty } = this.state;\n    const { value, valid, dirty, errorMessage, resetValue, disabled } = inputs[input];\n    return {\n      value, valid, dirty, errorMessage, forceDirty, resetValue, disabled,\n      onChange: (value) => {\n        this.setInputValues(input, { value });\n        if (onChange) {\n          onChange(value);\n        }\n      },\n      validate: (value, extra = {}) => {\n        if (validate) {\n          const validateObj = validate(value, extra);\n          this.setInputValues(input, {\n            valid: validateObj.valid,\n            errorMessage: validateObj.errorMessage,\n            dirty: true\n          });\n        } else {\n          this.setInputValues(input, {\n            valid: true,\n            errorMessage: '',\n            dirty: true\n          });\n        }\n      },\n      valueWasResetted: () => {\n        this.setInputValues(input, { resetValue: false });\n      }\n    };\n  }\n\n  getChildrenComponents(children) {\n    return React.Children.map(children,\n      (child) => {\n        let component = child;\n        switch (child.type.name) {\n          case 'Wrapper':\n            component = (\n              <Wrapper {...child.props}>\n                {this.getChildrenComponents(child.props.children)}\n              </Wrapper>\n            );\n            break;\n          case 'SubmitButton':\n            component = React.cloneElement(child, this.getSubmitButtonProps(child.props));\n            break;\n          case 'ResetButton':\n            component = React.cloneElement(child, this.getResetButtonProps(child.props));\n            break;\n          case 'Input':\n          case 'DropdownWrapper':\n            component = React.cloneElement(child, this.getInputsCommonProps(child.props));\n            break;\n          case 'CustomInput':\n            const customInput = child.props.children;\n            component = React.cloneElement(customInput, this.getInputsCommonProps(customInput.props));\n            break;\n          case 'CustomSubmitButton':\n            const customSubmitButton = child.props.children;\n            component = React.cloneElement(customSubmitButton, this.getSubmitButtonProps(child.props));\n            break;\n          case 'CustomResetButton':\n            const customResetButton = child.props.children;\n            component = React.cloneElement(customResetButton, this.getResetButtonProps(child.props));\n            break;\n        }\n        return component;\n      }\n    );\n  }\n\n  render() {\n    return (\n      <form className={this.props.className}>\n        {this.getChildrenComponents(this.props.children)}\n      </form>\n    );\n  }\n}\n\nForm.propTypes = {\n  className: React.PropTypes.string,\n  resetForm: React.PropTypes.bool,\n  formWasResetted: React.PropTypes.func,\n  onSubmit: React.PropTypes.func.isRequired,\n  onReset: React.PropTypes.func,\n  disableInputs: React.PropTypes.bool\n};\n\nForm.CustomInput = CustomInput;\nForm.CustomInput.displayName = 'CustomInput';\n\nForm.Input = Input;\nForm.Input.displayName = 'Input';\n\nForm.Dropdown = Dropdown;\nForm.Dropdown.displayName = 'Dropdown';\n\nForm.SubmitButton = SubmitButton;\nForm.SubmitButton.displayName = 'SubmitButton';\n\nForm.CustomSubmitButton = CustomSubmitButton;\nForm.CustomSubmitButton.displayName = 'CustomSubmitButton';\n\nForm.ResetButton = ResetButton;\nForm.ResetButton.displayName = 'ResetButton';\n\nForm.CustomResetButton = CustomResetButton;\nForm.CustomResetButton.displayName = 'CustomResetButton';\n\nForm.Wrapper = Wrapper;\nForm.Wrapper.displayName = 'Wrapper';\n\nexport default Form;\n"
  ]
}
