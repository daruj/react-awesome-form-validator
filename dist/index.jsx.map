{
  "version": 3,
  "sources": [
    "index.jsx"
  ],
  "names": [
    "Form",
    "props",
    "inputs",
    "getInput",
    "child",
    "getDefaultValues",
    "valid",
    "value",
    "validate",
    "defaults",
    "dirty",
    "errorMessage",
    "resetValue",
    "type",
    "name",
    "children",
    "length",
    "x",
    "customInput",
    "state",
    "forceDirty",
    "resetForm",
    "formWasResetted",
    "input",
    "setState",
    "onChange",
    "extra",
    "validateObj",
    "valueWasResetted",
    "Children",
    "map",
    "component",
    "getComponent",
    "cloneElement",
    "disabled",
    "disabledUntilFormIsValidated",
    "onClick",
    "event",
    "preventDefault",
    "getCommonMethods",
    "childrenWithProps",
    "className",
    "propTypes",
    "node",
    "PropTypes",
    "string",
    "bool",
    "func",
    "CustomInput",
    "displayName",
    "Input",
    "Dropdown",
    "SubmitButton",
    "ResetButton",
    "Wrapper"
  ],
  "mappings": "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",
  "file": "index.jsx",
  "sourceRoot": "../src/form",
  "sourcesContent": [
    "import React, { Component, PropTypes } from 'react';\nimport Input from './input';\nimport Dropdown from './dropdown';\nimport SubmitButton from './submit-button';\nimport ResetButton from './reset-button';\nimport Wrapper from './wrapper';\nimport CustomInput from './custom-input';\nimport { some } from 'lodash';\n\nclass Form extends Component {\n  static propTypes = {\n    children: PropTypes.node\n  }\n\n  constructor(props) {\n    super(props);\n\n    const inputs = {};\n\n    const getInput = (child) => {\n      const getDefaultValues = ({ valid, value, validate }) => {\n        const defaults = {\n          valid: valid || !validate,\n          value: value || '',\n          dirty: false,\n          errorMessage: ''\n        };\n        return { ...defaults, defaults, resetValue: false };\n      };\n      switch (child.type.name) {\n        case 'Wrapper':\n          if (child.props.children) {\n            if (child.props.children.length) {\n              for (const x in child.props.children) {\n                getInput(child.props.children[x]);\n              }\n            } else {\n              getInput(child.props.children);\n            }\n          }\n          break;\n        case 'Input':\n        case 'DropdownWrapper': inputs[child.props.name] = getDefaultValues(child.props); break;\n        case 'CustomInput':\n          const customInput = child.props.children;\n          inputs[customInput.props.name] = getDefaultValues(customInput.props);\n          break;\n      }\n    };\n\n    for (const x in this.props.children) {\n      getInput(this.props.children[x]);\n    }\n\n    this.state = { forceDirty: false, inputs };\n  }\n\n  componentWillReceiveProps({ resetForm }) {\n    if (this.props.resetForm != resetForm && resetForm) {\n      this.resetForm();\n      this.props.formWasResetted();\n    }\n  }\n\n  resetForm() {\n    const state = { ...this.state };\n    const inputs = state.inputs;\n    for (const input in state.inputs) {\n      const { valid, value, dirty } = this.state.inputs[input].defaults;\n      inputs[input] = {\n        ...this.state.inputs[input],\n        resetValue: true,\n        valid, value, dirty\n      };\n    }\n    this.setState({ state, forceDirty: false });\n  }\n\n  getCommonMethods(props) {\n    const { name, validate, onChange } = props;\n    const { inputs, forceDirty } = this.state;\n    const { value, valid, dirty, errorMessage, resetValue } = inputs[name];\n    return {\n      value, valid, dirty, errorMessage, forceDirty, resetValue,\n      onChange: (value) => {\n        const state = { ...this.state };\n        state.inputs[name].value = value;\n        this.setState(state);\n        if (onChange) {\n          onChange(value);\n        }\n      },\n      validate: (value, extra = {}) => {\n        const state = { ...this.state };\n        if (validate) {\n          const validateObj = validate(value, extra);\n          state.inputs[name] = {\n            ...state.inputs[name],\n            valid: validateObj.valid,\n            errorMessage: validateObj.errorMessage,\n            dirty: true\n          };\n        } else {\n          state.inputs[name] = {\n            ...state.inputs[name],\n            valid: true,\n            errorMessage: '',\n            dirty: true\n          };\n        }\n        this.setState({ state });\n      },\n      valueWasResetted: () => {\n        const state = { ...this.state };\n        state.inputs[name] = {\n          ...state.inputs[name],\n          resetValue: false\n        };\n        this.setState({ state });\n      }\n    };\n  }\n\n  getComponent(children) {\n    return React.Children.map(children,\n      (child) => {\n        let component = child;\n        switch (child.type.name) {\n          case 'Wrapper':\n            component = (\n              <Wrapper {...child.props}>\n                {this.getComponent(child.props.children)}\n              </Wrapper>\n            );\n            break;\n          case 'SubmitButton':\n            component = React.cloneElement(child, {\n              disabled: child.props.disabledUntilFormIsValidated\n                ? some(this.state.inputs, (input) => !input.valid)\n                : false,\n              onClick: (event) => {\n                event.preventDefault();\n                const state = { ...this.state };\n                //check if all the inputs are valid\n                if (!some(state.inputs, (input) => !input.valid)) {\n                  const inputs = {};\n                  for (const input in state.inputs) {\n                    inputs[input] = state.inputs[input].value;\n                  }\n                  // proceed with the flow\n                  child.props.onClick({ ...inputs });\n                } else {\n                  const inputs = state.inputs;\n                  for (const input in inputs) {\n                    inputs[input] = { ...inputs[input], dirty: true };\n                  }\n                  this.setState({ ...state, forceDirty: true });\n                }\n              }\n            });\n            break;\n          case 'ResetButton':\n            component = React.cloneElement(child, {\n              onClick: (event) => {\n                event.preventDefault();\n                this.resetForm();\n                if (child.props.onClick) {\n                  child.props.onClick();\n                }\n              }\n            });\n            break;\n          case 'Input':\n          case 'DropdownWrapper':\n            component = React.cloneElement(child, this.getCommonMethods(child.props));\n            break;\n          case 'CustomInput':\n            const customInput = child.props.children;\n            component = React.cloneElement(customInput, this.getCommonMethods(customInput.props));\n            break;\n        }\n        return component;\n      }\n    );\n  }\n\n  render() {\n    const childrenWithProps = this.getComponent(this.props.children);\n    return (\n      <form className={this.props.className}>\n        {childrenWithProps}\n      </form>\n    );\n  }\n}\n\nForm.propTypes = {\n  className: React.PropTypes.string,\n  resetForm: React.PropTypes.bool,\n  formWasResetted: React.PropTypes.func\n};\n\nForm.CustomInput = CustomInput;\nForm.CustomInput.displayName = 'CustomInput';\n\nForm.Input = Input;\nForm.Input.displayName = 'Input';\n\nForm.Dropdown = Dropdown;\nForm.Dropdown.displayName = 'Dropdown';\n\nForm.SubmitButton = SubmitButton;\nForm.SubmitButton.displayName = 'SubmitButton';\n\n\nForm.ResetButton = ResetButton;\nForm.ResetButton.displayName = 'ResetButton';\n\nForm.Wrapper = Wrapper;\nForm.Wrapper.displayName = 'Wrapper';\n\nexport default Form;\n"
  ]
}
