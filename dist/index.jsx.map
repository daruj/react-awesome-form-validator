{
  "version": 3,
  "sources": [
    "index.jsx"
  ],
  "names": [
    "Form",
    "props",
    "inputs",
    "getInput",
    "child",
    "getDefaultValues",
    "valid",
    "value",
    "validate",
    "disabled",
    "defaults",
    "dirty",
    "errorMessage",
    "validateObj",
    "resetValue",
    "needToValidate",
    "type",
    "displayName",
    "children",
    "length",
    "x",
    "name",
    "customInput",
    "formElements",
    "state",
    "forceDirty",
    "resetForm",
    "disableInputs",
    "clearValuesOnReset",
    "clearValues",
    "formWasResetted",
    "setInputsValues",
    "input",
    "setState",
    "onClick",
    "event",
    "preventDefault",
    "onReset",
    "disabledUntilFormIsValidated",
    "onSubmit",
    "getInputsAndTheirValues",
    "newValues",
    "inputName",
    "onChange",
    "setInputValues",
    "extra",
    "valueWasResetted",
    "Children",
    "map",
    "component",
    "getChildrenComponents",
    "cloneElement",
    "getSubmitButtonProps",
    "getResetButtonProps",
    "getInputsCommonProps",
    "customSubmitButton",
    "customResetButton",
    "className",
    "propTypes",
    "node",
    "PropTypes",
    "string",
    "bool",
    "func",
    "isRequired",
    "CustomInput",
    "Input",
    "Dropdown",
    "SubmitButton",
    "ResetButton",
    "CustomSubmitButton",
    "CustomResetButton",
    "Wrapper"
  ],
  "mappings": "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",
  "file": "index.jsx",
  "sourceRoot": "../src/form",
  "sourcesContent": [
    "import React, { Component, PropTypes } from 'react';\nimport Input from './input';\nimport Dropdown from './dropdown';\nimport SubmitButton from './submit-button';\nimport ResetButton from './reset-button';\nimport Wrapper from './wrapper';\nimport CustomInput from './custom-input';\nimport CustomResetButton from './custom-reset-button';\nimport CustomSubmitButton from './custom-submit-button';\nimport emptySpan from './empty-span';\n\nimport { some } from 'lodash';\n\n\nclass Form extends Component {\n  static propTypes = {\n    children: PropTypes.node\n  }\n\n  constructor(props) {\n    super(props);\n\n    const inputs = {};\n\n    const getInput = (child) => {\n      const getDefaultValues = ({ valid, value, validate, disabled = false }) => {\n        // default values\n        let defaults = {\n          valid: !validate,\n          value: '',\n          dirty: false,\n          errorMessage: ''\n        };\n        if (value) {\n          if (validate) {\n            // default values when the input has a value and a validate prop\n            const validateObj = validate(value);\n            defaults = {\n              value,\n              valid: validateObj.valid,\n              errorMessage: validateObj.errorMessage,\n              dirty: true\n            };\n          } else {\n            // default values when the input has a value but has not a validate prop\n            defaults = {\n              valid: true,\n              value,\n              dirty: true,\n              errorMessage: ''\n            };\n          }\n        }\n\n        return { ...defaults, defaults, resetValue: false, disabled, needToValidate: validate };\n      };\n      switch (child.type.displayName) {\n        case 'Wrapper':\n          if (child.props.children) {\n            if (child.props.children.length) {\n              for (const x in child.props.children) {\n                getInput(child.props.children[x]);\n              }\n            } else {\n              getInput(child.props.children);\n            }\n          }\n          break;\n        case 'Input':\n        case 'Dropdown': inputs[child.props.name] = getDefaultValues(child.props); break;\n        case 'CustomInput':\n          const customInput = child.props.children;\n          inputs[customInput.props.name] = getDefaultValues(customInput.props);\n          break;\n      }\n    };\n\n    const formElements = this.props.children;\n    for (const x in formElements) {\n      if (this.props.children.length) {\n        getInput(this.props.children[x]);\n      } else {\n        getInput(this.props.children);\n      }\n    }\n    this.state = { forceDirty: false, inputs };\n  }\n\n  componentWillReceiveProps({ resetForm, disableInputs, clearValuesOnReset }) {\n    if (this.props.resetForm != resetForm && resetForm) {\n      this.resetForm({ clearValues: clearValuesOnReset });\n      this.props.formWasResetted();\n    }\n\n    if (this.props.disableInputs != disableInputs) {\n      this.setInputsValues({ disabled: disableInputs });\n    }\n  }\n\n  resetForm({ clearValues }) {\n    const state = { ...this.state };\n    const inputs = state.inputs;\n    for (const input in state.inputs) {\n      const { valid, value, dirty } = state.inputs[input].defaults;\n      inputs[input] = {\n        ...state.inputs[input],\n        resetValue: true,\n        valid: clearValues ? !state.inputs[input].needToValidate : valid,\n        dirty: clearValues ? false : dirty,\n        value: clearValues ? '' : value\n      };\n    }\n    this.setState({ state, forceDirty: false });\n  }\n\n  getResetButtonProps(props) {\n    return {\n      disabled: this.props.disableInputs,\n      onClick: (event) => {\n        event.preventDefault();\n        this.resetForm({ clearValues: props.clearValues });\n        // proceed to call the onReset prop from the Form.\n        if (this.props.onReset) {\n          this.props.onReset();\n        }\n      }\n    };\n  }\n\n  getSubmitButtonProps(props) {\n    return {\n      disabled: this.props.disableInputs || (props.disabledUntilFormIsValidated\n        ? some(this.state.inputs, (input) => !input.valid)\n        : false),\n      onClick: (event) => {\n        event.preventDefault();\n        //check if all the inputs are valid\n        if (!some(this.state.inputs, (input) => !input.valid)) {\n          // proceed to call the onSubmit prop from the Form.\n          this.props.onSubmit({ ...this.getInputsAndTheirValues() });\n        } else {\n          this.setInputsValues({ dirty: true });\n          this.setState({ forceDirty: true });\n        }\n      }\n    };\n  }\n\n  getInputsAndTheirValues() {\n    const inputs = {};\n    for (const input in this.state.inputs) {\n      inputs[input] = this.state.inputs[input].value;\n    }\n    return inputs;\n  }\n\n  setInputsValues(newValues) {\n    const state = { ...this.state };\n    const inputs = state.inputs;\n    for (const input in state.inputs) {\n      inputs[input] = { ...state.inputs[input], ...newValues };\n    }\n    this.setState({ state });\n  }\n\n  setInputValues(inputName, newValues) {\n    const state = { ...this.state };\n    state.inputs[inputName] = {\n      ...state.inputs[inputName],\n      ...newValues\n    };\n    this.setState({ state });\n  }\n\n  getInputsCommonProps(props) {\n    const { name, validate, onChange } = props;\n    const input = name;\n    const { inputs, forceDirty } = this.state;\n    const { value, valid, dirty, errorMessage, resetValue, disabled } = inputs[input];\n    return {\n      value, valid, dirty, errorMessage, forceDirty, resetValue, disabled,\n      onChange: (value) => {\n        this.setInputValues(input, { value });\n        if (onChange) {\n          onChange(value);\n        }\n      },\n      validate: (value, extra = {}) => {\n        if (validate) {\n          const validateObj = validate(value, extra);\n          this.setInputValues(input, {\n            valid: validateObj.valid,\n            errorMessage: validateObj.errorMessage,\n            dirty: true\n          });\n        } else {\n          this.setInputValues(input, {\n            valid: true,\n            errorMessage: '',\n            dirty: true\n          });\n        }\n      },\n      valueWasResetted: () => {\n        this.setInputValues(input, { resetValue: false });\n      }\n    };\n  }\n\n  getChildrenComponents(children) {\n    return React.Children.map(children,\n      (child) => {\n        let component = child;\n        switch (child.type.displayName) {\n          case 'Wrapper':\n            component = (\n              <Wrapper {...child.props}>\n                {this.getChildrenComponents(child.props.children)}\n              </Wrapper>\n            );\n            break;\n          case 'SubmitButton':\n            component = React.cloneElement(child, this.getSubmitButtonProps(child.props));\n            break;\n          case 'ResetButton':\n            component = React.cloneElement(child, this.getResetButtonProps(child.props));\n            break;\n          case 'Input':\n          case 'Dropdown':\n            component = React.cloneElement(child, this.getInputsCommonProps(child.props));\n            break;\n          case 'CustomInput':\n            const customInput = child.props.children;\n            component = React.cloneElement(customInput, this.getInputsCommonProps(customInput.props));\n            break;\n          case 'CustomSubmitButton':\n            const customSubmitButton = child.props.children.props\n              ? child.props.children : emptySpan({ children: child.props.children });\n            component = React.cloneElement(customSubmitButton, this.getSubmitButtonProps(child.props));\n            break;\n          case 'CustomResetButton':\n            const customResetButton = child.props.children.props\n              ? child.props.children : emptySpan({ children: child.props.children });\n            component = React.cloneElement(customResetButton, this.getResetButtonProps(child.props));\n            break;\n        }\n        return component;\n      }\n    );\n  }\n\n  render() {\n    return (\n      <form className={this.props.className}>\n        {this.getChildrenComponents(this.props.children)}\n      </form>\n    );\n  }\n}\n\nForm.propTypes = {\n  className: React.PropTypes.string,\n  resetForm: React.PropTypes.bool,\n  clearValuesOnReset: React.PropTypes.bool,\n  formWasResetted: React.PropTypes.func,\n  onSubmit: React.PropTypes.func.isRequired,\n  onReset: React.PropTypes.func,\n  disableInputs: React.PropTypes.bool\n};\n\nForm.CustomInput = CustomInput;\nForm.CustomInput.displayName = 'CustomInput';\n\nForm.Input = Input;\nForm.Input.displayName = 'Input';\n\nForm.Dropdown = Dropdown;\nForm.Dropdown.displayName = 'Dropdown';\n\nForm.SubmitButton = SubmitButton;\nForm.SubmitButton.displayName = 'SubmitButton';\n\nForm.ResetButton = ResetButton;\nForm.ResetButton.displayName = 'ResetButton';\n\nForm.CustomSubmitButton = CustomSubmitButton;\nForm.CustomSubmitButton.displayName = 'CustomSubmitButton';\n\nForm.CustomResetButton = CustomResetButton;\nForm.CustomResetButton.displayName = 'CustomResetButton';\n\nForm.Wrapper = Wrapper;\nForm.Wrapper.displayName = 'Wrapper';\n\nexport default Form;\n"
  ]
}
