{
  "version": 3,
  "sources": [
    "index.jsx"
  ],
  "names": [
    "Form",
    "props",
    "state",
    "forceDirty",
    "validInputs",
    "inputValues",
    "name",
    "validate",
    "isValid",
    "valid",
    "setState",
    "setValidInputToUndefined",
    "undefined",
    "setInputValue",
    "value",
    "errorMessage",
    "children",
    "Children",
    "map",
    "child",
    "component",
    "type",
    "getComponent",
    "cloneElement",
    "onClick",
    "event",
    "preventDefault",
    "x",
    "getCommonMethods",
    "customInput",
    "childrenWithProps",
    "className",
    "propTypes",
    "node",
    "PropTypes",
    "string",
    "CustomInput",
    "displayName",
    "Input",
    "Dropdown",
    "SubmitButton",
    "Wrapper"
  ],
  "mappings": "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",
  "file": "index.jsx",
  "sourceRoot": "../src/form",
  "sourcesContent": [
    "import React, { Component, PropTypes } from 'react';\nimport Input from './input';\nimport Dropdown from './dropdown';\nimport SubmitButton from './submit-button';\nimport Wrapper from './wrapper';\nimport CustomInput from './custom-input';\nimport { some } from 'lodash';\n\nclass Form extends Component {\n  static propTypes = {\n    children: PropTypes.node\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      forceDirty: false,\n      validInputs: {},\n      inputValues: {}\n    };\n  }\n\n  getCommonMethods(props) {\n    const { name, validate } = props;\n    return {\n      forceDirty: this.state.forceDirty,\n      isValid: (valid) => {\n        const state = { ...this.state };\n        state.validInputs[name] = valid;\n        this.setState(state);\n      },\n      setValidInputToUndefined: () => {\n        const state = { ...this.state };\n        state.validInputs[name] = undefined;\n        state.inputValues[name] = undefined;\n        this.setState(state);\n      },\n      setInputValue: (value) => {\n        const state = { ...this.state };\n        state.inputValues[name] = value;\n        this.setState(state);\n      },\n      validate: (value) => {\n        if (validate) {\n          return validate(value);\n        } else {\n          return {\n            valid: true,\n            errorMessage: ''\n          };\n        }\n      }\n    };\n  }\n\n  getComponent(children) {\n    return React.Children.map(children,\n      (child) => {\n        let component = child;\n        switch (child.type.name) {\n          case 'Wrapper':\n            component = (\n              <Wrapper {...child.props}>\n                {this.getComponent(child.props.children)}\n              </Wrapper>\n            );\n            break;\n          case 'SubmitButton':\n            component = React.cloneElement(child, {\n              onClick: (event) => {\n                event.preventDefault();\n                if (!some(this.state.validInputs, (x) => !x)) {\n                  child.props.onClick(this.state.inputValues);\n                } else {\n                  this.setState({ forceDirty: true });\n                }\n              }\n            });\n            break;\n          case 'Input':\n          case 'Dropdown':\n            component = React.cloneElement(child, this.getCommonMethods(child.props));\n            break;\n          case 'CustomInput':\n            const customInput = child.props.children;\n            component = React.cloneElement(customInput, this.getCommonMethods(customInput.props));\n            break;\n        }\n        return component;\n      }\n    );\n  }\n\n  render() {\n    const childrenWithProps = this.getComponent(this.props.children);\n    return (\n      <form className={this.props.className}>\n        {childrenWithProps}\n      </form>\n    );\n  }\n}\n\nForm.propTypes = {\n  className: React.PropTypes.string\n};\n\nForm.CustomInput = CustomInput;\nForm.CustomInput.displayName = 'CustomInput';\n\nForm.Input = Input;\nForm.Input.displayName = 'Input';\n\nForm.Dropdown = Dropdown;\nForm.Dropdown.displayName = 'Dropdown';\n\nForm.SubmitButton = SubmitButton;\nForm.SubmitButton.displayName = 'SubmitButton';\n\nForm.Wrapper = Wrapper;\nForm.Wrapper.displayName = 'Wrapper';\n\nexport default Form;\n"
  ]
}
