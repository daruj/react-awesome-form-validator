{
  "version": 3,
  "sources": [
    "index.jsx"
  ],
  "names": [
    "Form",
    "props",
    "validInputs",
    "inputValues",
    "defaultValues",
    "getInput",
    "child",
    "type",
    "name",
    "children",
    "valid",
    "value",
    "customInput",
    "x",
    "state",
    "forceDirty",
    "resetForm",
    "setState",
    "formWasResetted",
    "input",
    "validate",
    "onChange",
    "resetValue",
    "valueWasResetted",
    "extra",
    "validateObj",
    "errorMessage",
    "Children",
    "map",
    "component",
    "getComponent",
    "cloneElement",
    "disabled",
    "disabledUntilFormIsValidated",
    "onClick",
    "event",
    "preventDefault",
    "getCommonMethods",
    "childrenWithProps",
    "className",
    "propTypes",
    "node",
    "PropTypes",
    "string",
    "bool",
    "func",
    "CustomInput",
    "displayName",
    "Input",
    "Dropdown",
    "SubmitButton",
    "ResetButton",
    "Wrapper"
  ],
  "mappings": "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",
  "file": "index.jsx",
  "sourceRoot": "../src/form",
  "sourcesContent": [
    "import React, { Component, PropTypes } from 'react';\nimport Input from './input';\nimport Dropdown from './dropdown';\nimport SubmitButton from './submit-button';\nimport ResetButton from './reset-button';\nimport Wrapper from './wrapper';\nimport CustomInput from './custom-input';\nimport { some } from 'lodash';\n\nclass Form extends Component {\n  static propTypes = {\n    children: PropTypes.node\n  }\n\n  constructor(props) {\n    super(props);\n\n    const validInputs = {};\n    const inputValues = {};\n    const defaultValues = {\n      validInputs: {},\n      inputValues: {}\n    };\n    const getInput = (child) => {\n      switch (child.type.name) {\n        case 'Wrapper':\n          getInput(child.props.children);\n          break;\n        case 'Input':\n        case 'Dropdown':\n          validInputs[child.props.name] = child.props.valid || false;\n          inputValues[child.props.name] = child.props.value || '';\n          defaultValues.validInputs[child.props.name] = child.props.valid || false;\n          defaultValues.inputValues[child.props.name] = child.props.value || '';\n          break;\n        case 'CustomInput':\n          const customInput = child.props.children;\n          validInputs[customInput.props.name] = customInput.props.valid || false;\n          inputValues[customInput.props.name] = customInput.props.value || '';\n          defaultValues.validInputs[customInput.props.name] = customInput.props.valid || false;\n          defaultValues.inputValues[customInput.props.name] = customInput.props.value || '';\n          break;\n      }\n    };\n\n    for (const x in this.props.children) {\n      getInput(this.props.children[x]);\n    }\n\n    this.state = {\n      forceDirty: false,\n      resetForm: false,\n      validInputs,\n      inputValues,\n      defaultValues\n    };\n  }\n\n  componentWillReceiveProps({ resetForm }) {\n    if (this.props.resetForm != resetForm && resetForm) {\n      this.setState({ resetForm: true });\n      this.resetForm();\n      this.props.formWasResetted();\n    }\n  }\n\n  resetForm() {\n    const validInputs = {};\n    const inputValues = {};\n    const defaultValues = { ...this.state.defaultValues };\n\n    for (const input in this.state.inputValues) {\n      inputValues[input] = defaultValues.inputValues[input] || '';\n      validInputs[input] = defaultValues.validInputs[input] || false;\n    }\n    this.setState({ ...this.state, resetForm: true, validInputs, inputValues });\n  }\n\n  getCommonMethods(props) {\n    const { name, validate, onChange } = props;\n    const { validInputs, inputValues, resetForm } = this.state;\n    return {\n      resetValue: resetForm,\n      valueWasResetted: () => this.setState({ resetForm: false }),\n      value: inputValues[name],\n      valid: validInputs[name],\n      forceDirty: this.state.forceDirty,\n      onChange: (value) => {\n        const state = { ...this.state };\n        state.inputValues[name] = value;\n        this.setState(state);\n        if (onChange) {\n          onChange(value);\n        }\n      },\n      validate: (value, extra = {}) => {\n        if (validate) {\n          const validateObj = validate(value, extra);\n          const state = { ...this.state };\n          state.validInputs[name] = validateObj.valid;\n          return validateObj;\n        } else {\n          return {\n            valid: true,\n            errorMessage: ''\n          };\n        }\n      }\n    };\n  }\n\n  getComponent(children) {\n    return React.Children.map(children,\n      (child) => {\n        let component = child;\n        switch (child.type.name) {\n          case 'Wrapper':\n            component = (\n              <Wrapper {...child.props}>\n                {this.getComponent(child.props.children)}\n              </Wrapper>\n            );\n            break;\n          case 'SubmitButton':\n            component = React.cloneElement(child, {\n              disabled: child.props.disabledUntilFormIsValidated\n                ? some(this.state.validInputs, (x) => !x)\n                : false,\n              onClick: (event) => {\n                event.preventDefault();\n                if (!some(this.state.validInputs, (x) => !x)) {\n                  child.props.onClick(this.state.inputValues);\n                } else {\n                  this.setState({ forceDirty: true });\n                }\n              }\n            });\n            break;\n          case 'ResetButton':\n            component = React.cloneElement(child, {\n              onClick: (event) => {\n                event.preventDefault();\n                this.resetForm();\n                if (child.props.onClick) {\n                  child.props.onClick();\n                }\n              }\n            });\n            break;\n          case 'Input':\n          case 'Dropdown':\n            component = React.cloneElement(child, this.getCommonMethods(child.props));\n            break;\n          case 'CustomInput':\n            const customInput = child.props.children;\n            component = React.cloneElement(customInput, this.getCommonMethods(customInput.props));\n            break;\n        }\n        return component;\n      }\n    );\n  }\n\n  render() {\n    const childrenWithProps = this.getComponent(this.props.children);\n    return (\n      <form\n        className={this.props.className}\n      >\n        {childrenWithProps}\n      </form>\n    );\n  }\n}\n\nForm.propTypes = {\n  className: React.PropTypes.string,\n  resetForm: React.PropTypes.bool,\n  formWasResetted: React.PropTypes.func\n};\n\nForm.CustomInput = CustomInput;\nForm.CustomInput.displayName = 'CustomInput';\n\nForm.Input = Input;\nForm.Input.displayName = 'Input';\n\nForm.Dropdown = Dropdown;\nForm.Dropdown.displayName = 'Dropdown';\n\nForm.SubmitButton = SubmitButton;\nForm.SubmitButton.displayName = 'SubmitButton';\n\n\nForm.ResetButton = ResetButton;\nForm.ResetButton.displayName = 'ResetButton';\n\nForm.Wrapper = Wrapper;\nForm.Wrapper.displayName = 'Wrapper';\n\nexport default Form;\n"
  ]
}
